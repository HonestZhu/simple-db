package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate predicate;
    private OpIterator[] childs;
    private TupleDesc tupleDesc;
    private Tuple curTuple;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.predicate = p;
        this.childs = new OpIterator[2];
        this.childs[0] = child1;
        this.childs[1] = child2;
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        this.curTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        return predicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        return childs[0].getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        return childs[1].getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
         super.open();
         childs[0].open();
         childs[1].open();
    }

    public void close() {
        super.close();
        childs[0].close();
        childs[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        childs[0].rewind();
        childs[1].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // 需要使用curTuple来记录当前join左侧遍历到的那个tuple
        while(childs[0].hasNext() || curTuple != null) {
            if(childs[0].hasNext() && curTuple == null) {
                curTuple = childs[0].next();
            }
            Tuple t1 = curTuple;
            while(childs[1].hasNext()) {
                Tuple t2 = childs[1].next();

                if (predicate.filter(t1, t2)) {
                    int len1 = t1.getTupleDesc().numFields();
                    int len2 = t2.getTupleDesc().numFields();
                    Tuple tuple = new Tuple(getTupleDesc());
                    for (int i = 0; i < len1; i++) {
                        tuple.setField(i, t1.getField(i));
                    }
                    for (int i = 0; i < len2; i++) {
                        tuple.setField(i + len1, t2.getField(i));
                    }
                    return tuple;
                }
            }
            childs[1].rewind(); // 重置迭代器
            curTuple = null;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return childs;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.childs = children;
    }

}
